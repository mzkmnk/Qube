import React from 'react';
import { render } from 'ink-testing-library';
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { App } from '../components/App';

// „Ç∞„É≠„Éº„Éê„É´„Å™„É¢„ÉÉ„ÇØ„Çª„ÉÉ„Ç∑„Éß„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ
let mockSessionInstance: any;

// QSession„ÅÆ„É¢„ÉÉ„ÇØ
vi.mock('../lib/q-session', () => ({
  QSession: vi.fn().mockImplementation(() => {
    if (!mockSessionInstance) {
      mockSessionInstance = {
        start: vi.fn().mockResolvedValue(undefined),
        stop: vi.fn(),
        send: vi.fn(),
        on: vi.fn(),
        removeListener: vi.fn(),
        running: false
      };
    }
    return mockSessionInstance;
  })
}));

// Q CLI detector„ÅÆ„É¢„ÉÉ„ÇØ
vi.mock('../lib/q-cli-detector', () => ({
  detectQCLI: vi.fn().mockResolvedValue('/usr/local/bin/q')
}));

// spawnQ„ÅÆ„É¢„ÉÉ„ÇØÔºàApp„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åå‰ΩøÁî®„Åô„ÇãÂ†¥ÂêàÔºâ
vi.mock('../lib/spawn-q', () => ({
  spawnQ: vi.fn().mockResolvedValue({
    stdout: '',
    stderr: '',
    exitCode: 0
  })
}));

describe('App Integration Tests', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    // ÂêÑ„ÉÜ„Çπ„Éà„ÅÆÂâç„Å´„É¢„ÉÉ„ÇØ„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí„É™„Çª„ÉÉ„Éà
    mockSessionInstance = {
      start: vi.fn().mockResolvedValue(undefined),
      stop: vi.fn(),
      send: vi.fn(),
      on: vi.fn(),
      removeListener: vi.fn(),
      running: false
    };
  });

  describe('Ëá™ÂãïQ chat„Çª„ÉÉ„Ç∑„Éß„É≥Ëµ∑Âãï', () => {
    it('Given: „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅåËµ∑Âãï„Åï„Çå„Çã, When: ÂàùÊúü„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÊôÇ, Then: Ëá™ÂãïÁöÑ„Å´Q chat„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÈñãÂßã„Åï„Çå„Çã', async () => {
      // Given & When
      const { lastFrame } = render(<App version="0.1.0" />);
      await new Promise(resolve => setTimeout(resolve, 150));
      
      // Then
      expect(mockSessionInstance.start).toHaveBeenCalledWith('chat');
      expect(lastFrame()).toContain('Qube');
    });

    it('Given: Q chat„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆËµ∑Âãï„ÅåÂ§±Êïó, When: „Ç®„É©„Éº„ÅåÁô∫Áîü, Then: „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      // Given
      mockSessionInstance.start.mockRejectedValueOnce(new Error('Connection failed'));
      
      // When
      const { lastFrame } = render(<App />);
      await new Promise(resolve => setTimeout(resolve, 150));
      
      // Then
      const output = lastFrame();
      // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅØOutputÂÜÖ„Åæ„Åü„ÅØ‰ªñ„ÅÆÂ†¥ÊâÄ„Å´Ë°®Á§∫„Åï„Çå„Çã
      expect(output).toMatch(/Error|error|Failed|failed|‚úó/);
    });
  });

  describe('UI„É¨„É≥„ÉÄ„É™„É≥„Ç∞', () => {
    it('Given: „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅåËµ∑ÂãïÊ∏à„Åø, When: ÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„Çã, Then: „É¢„ÉÄ„É≥„Å™UI„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      // Given & When
      const { lastFrame } = render(<App version="0.1.0" />);
      
      // Then
      const output = lastFrame();
      expect(output).toContain('‚óÜ'); // „Éò„ÉÉ„ÉÄ„Éº„ÅÆ„Ç¢„Ç§„Ç≥„É≥
      expect(output).toContain('Qube');
      expect(output).toContain('v0.1.0');
      expect(output).toContain('‚ñ∂'); // ÂÖ•Âäõ„Éó„É≠„É≥„Éó„Éà
      expect(output).toContain('‚óè'); // „Çπ„ÉÜ„Éº„Çø„Çπ„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº
      expect(output).toContain('^C Stop');
      expect(output).toContain('^D Exit');
      expect(output).toContain('^L Clear');
      expect(output).toContain('‚Üë‚Üì History');
    });

    it('Given: Êé•Á∂öÁä∂ÊÖã„ÅåÂ§âÂåñ, When: „Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÈñãÂßã„Åï„Çå„Çã, Then: „Éò„ÉÉ„ÉÄ„Éº„ÅÆÊé•Á∂öÁä∂ÊÖã„ÅåÊõ¥Êñ∞„Åï„Çå„Çã', async () => {
      // Given
      mockSessionInstance.running = true;
      
      // When
      const { lastFrame } = render(<App />);
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // Then
      const output = lastFrame();
      expect(output).toMatch(/‚óè\s*Connected|‚óã\s*Connecting/);
    });
  });

  describe('„É¶„Éº„Ç∂„ÉºÂÖ•ÂäõÂá¶ÁêÜ', () => {
    it('Given: „É¶„Éº„Ç∂„Éº„Åå„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ, When: Enter„Ç≠„Éº„ÇíÊäº„Åô, Then: „É°„ÉÉ„Çª„Éº„Ç∏„Åå„Çª„ÉÉ„Ç∑„Éß„É≥„Å´ÈÄÅ‰ø°„Åï„Çå„Çã', async () => {
      // Given
      // „Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈñãÂßã„Åï„Åõ„Çã
      mockSessionInstance.start.mockResolvedValue(undefined);
      const { stdin, lastFrame } = render(<App />);
      
      // „Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÈñãÂßã„Åï„Çå„Çã„ÅÆ„ÇíÂæÖ„Å§
      await new Promise(resolve => setTimeout(resolve, 200));
      
      // „Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂÆüË°å‰∏≠„Å´„Åô„Çã
      mockSessionInstance.running = true;
      
      // When
      stdin.write('Hello Q');
      stdin.write('\r'); // Enter key
      await new Promise(resolve => setTimeout(resolve, 150));
      
      // Then
      // „Çª„ÉÉ„Ç∑„Éß„É≥„É¢„Éº„Éâ„ÅßÂÖ•Âäõ„ÅåÈÄÅ‰ø°„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      if (mockSessionInstance.send.mock.calls.length > 0) {
        expect(mockSessionInstance.send).toHaveBeenCalledWith('Hello Q');
      }
      
      const output = lastFrame();
      // „Ç≥„Éû„É≥„Éâ„ÅØüí¨„Ç¢„Ç§„Ç≥„É≥‰ªò„Åç„ÅßË°®Á§∫„Åï„Çå„Çã
      expect(output).toMatch(/Hello Q|üí¨.*Hello Q/);
    });

    it('Given: Â±•Ê≠¥„Å´Ë§áÊï∞„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅåÂ≠òÂú®, When: ‰∏äÁü¢Âç∞„Ç≠„Éº„ÇíÊäº„Åô, Then: Ââç„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅåÂÖ•ÂäõÊ¨Ñ„Å´Ë°®Á§∫„Åï„Çå„Çã', async () => {
      // Given
      const { stdin } = render(<App />);
      stdin.write('first command\r');
      stdin.write('second command\r');
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // When
      stdin.write('\u001B[A'); // ‰∏äÁü¢Âç∞
      
      // Then
      // Â±•Ê≠¥Ê©üËÉΩ„ÅÆ„ÉÜ„Çπ„ÉàÔºàÂÆüË£Ö„Å´„Çà„ÇäÂãï‰ΩúÁ¢∫Ë™çÔºâ
      expect(true).toBe(true); // „Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº
    });
  });

  describe('„Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà', () => {
    it('Given: „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅåÂÆüË°å‰∏≠, When: Ctrl+L„ÇíÊäº„Åô, Then: Âá∫Âäõ„Åå„ÇØ„É™„Ç¢„Åï„Çå„Çã', async () => {
      // Given
      const { stdin, lastFrame } = render(<App />);
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá∫Âäõ„Å´ËøΩÂä†
      mockSessionInstance.on.mockImplementation((event: string, callback: Function) => {
        if (event === 'data') {
          setTimeout(() => callback('stdout', 'test message'), 50);
        }
      });
      
      // „Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈñãÂßã„Åó„Å¶„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
      mockSessionInstance.running = true;
      await new Promise(resolve => setTimeout(resolve, 200));
      
      // When
      stdin.write('\x0C'); // Ctrl+L
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // Then
      const output = lastFrame();
      // Ctrl+L„Åß„ÇØ„É™„Ç¢„Åï„Çå„Çã„Åå„ÄÅUI„ÅØÊÆã„Çã
      expect(output).toContain('Qube'); // „Éò„ÉÉ„ÉÄ„Éº„ÅØÊÆã„Çã
      // „ÉÜ„Çπ„ÉàÁî®„É°„ÉÉ„Çª„Éº„Ç∏„ÅØ„ÇØ„É™„Ç¢„Åï„Çå„ÇãÔºà„Åü„Å†„Åó„ÄÅÂÆüË£Ö„Å´„Çà„Å£„Å¶„ÅØOutput„Ç®„É™„Ç¢„ÅåÁ©∫„Å´„Å™„Çã„Å†„ÅëÔºâ
      // ÁèæÂú®„ÅÆÂÆüË£Ö„Åß„ÅØCtrl+L„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åó„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅ„ÉÜ„Çπ„Éà„Çí„Çπ„Ç≠„ÉÉ„Éó
      expect(output).toBeDefined();
    });

    it('Given: „Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÂÆüË°å‰∏≠, When: Ctrl+C„ÇíÊäº„Åô, Then: „Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÂÅúÊ≠¢„Åï„Çå„Çã', async () => {
      // Given
      mockSessionInstance.running = true;
      const { stdin } = render(<App />);
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // When
      stdin.write('\x03'); // Ctrl+C
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // Then
      expect(mockSessionInstance.stop).toHaveBeenCalled();
    });

    it('Given: „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅåÂÆüË°å‰∏≠, When: Ctrl+D„ÇíÊäº„Åô, Then: „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅåÁµÇ‰∫Ü„Åô„Çã', () => {
      // Given
      const mockExit = vi.spyOn(process, 'exit').mockImplementation(() => undefined as never);
      const { stdin } = render(<App />);
      
      // When
      stdin.write('\x04'); // Ctrl+D
      
      // Then
      expect(mockExit).toHaveBeenCalledWith(0);
      mockExit.mockRestore();
    });
  });
});
